name: "publish"

on:
  workflow_dispatch:
  push:
    tags:
      - "app-v*.*.*" # 只在推送 app-vX.Y.Z 格式的 tag 时触发

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          - platform: "ubuntu-latest"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf libinput-dev

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "LightMeetsPiano v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  # 支持 aur
  publish-aur:
    name: Publish to AUR
    runs-on: ubuntu-latest
    needs: publish-tauri

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version number from tag
        id: get_version
        # 从 tag (e.g., "app-v1.2.3") 中提取出版本号 "1.2.3"
        run: echo "VERSION=$(echo ${{ github.ref_name }} | sed -e 's/app-v//')" >> $GITHUB_OUTPUT

      - name: Ensure correct line endings
        run: |
          sudo apt-get update
          sudo apt-get install -y dos2unix
          dos2unix PKGBUILD

      - name: Update PKGBUILD version
        run: |
          sed -i "s/pkgver=.*/pkgver=${{ steps.get_version.outputs.VERSION }}/" PKGBUILD

      - name: Publish to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          # 你的 AUR 包名
          pkgname: lightmeetspiano-bin

          # 指向你更新后的 PKGBUILD 文件路径
          pkgbuild: ./PKGBUILD

          # 提交者信息，使用 bot 的默认信息即可，无需额外设置 secrets
          commit_username: "github-actions[bot]"
          commit_email: "41898282+github-actions[bot]@users.noreply.github.com"

          # SSH 私钥，从 GitHub Secrets 中读取
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

          # 提交信息，使用动态版本号
          commit_message: "Update to version ${{ steps.get_version.outputs.VERSION }}"

          # SSH 主机密钥扫描类型，这是个好习惯，保持即可
          ssh_keyscan_types: rsa,ecdsa,ed25519
